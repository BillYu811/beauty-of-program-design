封装：隐藏信息；保护数据；暴露几个有限的方法易于维护，可读性高。
抽象：不需要了解底层代码如何实现，只需要暴露的方法如何使用即可。它并不是面向对象独有的。
继承：单继承，多继承。提高代码复用性，提高代码逻辑性，比较符合人类的认知思维，提高可读性和可维护性。
多态：子类替换父类。继承+重写，接口类，duck-typing。提高复用性。


部分语言不支持多继承的原因：
多继承的菱形问题：B,C继承A, D继承BC,则在创建D时会有两个A的拷贝，那么实例化D时A会被init两次。
Python 使用了一个叫“方法解析顺序（Method Resolution Order，MRO）”来解决这个问题。
可以使用 类名.__mro__ 获得 MRO 的顺序
>>> D.__mro__
(<class '__main__.D'>, <class '__main__.B'>, <class '__main__.C'>, <class __main__.A'>, <class 'object'>)

php只支持单继承，但是可以通过 interface 或 trait 实现多继承。

个人做过的项目里，确实做到了封装和抽象，个人的原则是尽可能不暴露不需要的接口及数据。
继承主要是在项目中通过单继承来提高代码的可复用性。
