避免写出面向过程风格的面向对象代码
避免滥用getter和setter，setter避免滥用 getter尽量返回不可修改的数据。
不要把要用到的所有常量放在同一个常量类中，而是拆解它们。同时Utils类也是如此。
数据和方法分离的类（贫血模型）

抽象类：不能被实例化只能被继承。主要是为了代码复用
接口类：没有常量只有方法的类，方法不能包含代码实现，侧重解耦

滥用多层继承会导致代码可维护性变差，采用组合和接口的方式代替多层继承。

比如有抽象类A，包含大多数的业务逻辑。
实现：A+a+b， 继承抽象类A，定义一个a,b接口类，
实现：A+b+c， 继承抽象类A，使用定义好的b接口类，再定义一个c接口类。
而不是采用多层继承Abc这样的方法。
代码复用性高，易于维护，可读性也大大提高。
